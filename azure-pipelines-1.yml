# Node.js with React
# Build a Node.js project that uses React.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/javascript

trigger:
- none

variables:
  npm_config_cache: $(Pipeline.Workspace)/.npm

jobs: 
  - job: build_application
    pool:
      vmImage: ubuntu-latest
    steps:

        - task: NodeTool@0
          inputs:
            versionSpec: '10.x'
          displayName: 'Install Node.js'
        
        - task: Cache@2
          displayName: 'Cache node_modules'
          inputs:
            key: 'npm | "$(Agent.OS)" | $(Build.SourcesDirectory)/package-lock.json'
            path: $(Build.SourcesDirectory)/node_modules
            cacheHitVar: CACHE_RESTORED

        - task: Npm@1
          displayName: 'Install the dependencies'
          inputs:
            command: custom
            verbose: false
            customCommand: 'ci'
          condition: ne(variables.CACHE_RESTORED, 'true')

        - script: npm run build 
          displayName: 'npm install and build'
        - task: CopyFiles@2
          inputs:
            SourceFolder: './build'
            TargetFolder: $(Build.ArtifactStagingDirectory)

        - task: PublishBuildArtifacts@1
          inputs:
            PathtoPublish: '$(Build.ArtifactStagingDirectory)'
            ArtifactName: 'drop'
            publishLocation: 'Container'

  - job: test_application
    pool:
      vmImage: "ubuntu-latest"
    steps:
        - task: NodeTool@0
          inputs:
            versionSpec: '10.x'
          displayName: 'Install Node.js'
        
        - task: Cache@2
          displayName: 'Cache node_modules'
          inputs:
            key: 'npm | "$(Agent.OS)" | $(Build.SourcesDirectory)/package-lock.json'
            path: $(Build.SourcesDirectory)/node_modules
            cacheHitVar: CACHE_RESTORED

        - task: Npm@1
          displayName: 'Install the dependencies'
          inputs:
            command: custom
            verbose: false
            customCommand: 'ci'
          condition: ne(variables.CACHE_RESTORED, 'true')

        - script: npm test
          displayName: tests

        - task: PublishTestResults@2
          condition: succeededOrFailed()
          inputs:
            testRunner: JUnit
            testResultsFiles: '**/test-results.xml'
                
        
    